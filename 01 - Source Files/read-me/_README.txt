Installation
____________

1. Open cmd.exe for Windows or Terminal for OSX.
2. Navigate to the directory where package.json and gulpfile.js are located.
3. Run the following command:

npm install


This will download and install the dependencies for the build, it can take a while on slow connections. If you are using OSX and are getting npm install restrictions due to permission errors you may need to run 'sudo npm install' instead.


Build Commands
______________

gulp

: Run the build init and then watch for changes.


gulp watch

: Watch the build for changes.


gulp --prod

: Run the build with minified code and remove source maps for production / live deployment.


gulp --sync

: Run the build init, open stylefile, and then watch for changes with automatic browser reloading


Distribution
____________

Assets generated by the build will be put in the /public directory (or whatever you define in the config.js or gulpfile.js path config options).


CSS
___

!important should only ever be used for testing purposes or to override inline styles set by third party plugins.

Use classnames instead of IDs - this promotes reuse and lets developers take advantage of natural selector weights. IDs should only be used for javascript hooks or if a third party component or plugin requires the use of a specific ID.

The 'gulp watch' command will automatically compile the SASS files on save, it will also notify you of any CSS errors and will not complete the build until these have been fixed up.

The build will compile everything into one CSS file in the order defined in src/styles/main.scss

The SASS build will auto prefix vendor prefixes such as -webkit- or -moz- where appropriate, but do not rely on Autoprefixer alone and be dilligent during your browser testing.


Javascript
__________

The framework utilises the revealing module pattern for building robust javascript components (https://addyosmani.com/resources/essentialjsdesignpatterns/book/#revealingmodulepatternjavascript). The RVM pattern allows the developer to create private component logic and to mitigate the accidental creation of global variables or pollution of another component's scope. Functions within RVM components can also be exposed as public methods when mapped to the anonymous object returned at the end of the file.

Dependencies (Libraries, plugins etc) are compiled in the order they are specified within /src/scripts/dependencies.js. The compiled javascript from dependencies (/public/assets/js/dependencies.js) is loaded in the document head.

All javascript components are compiled into a single js file determined by the order specified in /src/scripts/components.js. Components must be initialized in this file: see the $(document).ready() block. The compiled javascript from components (/public/assets/js/scripts.js) is loaded in the document before the closing body tag.

The gulp console will alert you to any errors in your code with a specified file/line number of the error. JSLint will prompt you to follow the Crockford standard when writing javascript - this allows us to keep our code formatting consistent and familiar for other devs in the team.

Tabs 4 life yo.